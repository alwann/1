{
  "settings": {
    "name": "Site 2024-03-26 14:33",
    "currentPage": "index.html",
    "theme": {
      "name": "startm5",
      "title": "StartM5",
      "titlePreset": "StartM5",
      "styling": {
        "primaryColor": "#9fe870",
        "secondaryColor": "#ffd7ef",
        "successColor": "#3a341c",
        "infoColor": "#320707",
        "warningColor": "#a0e2e1",
        "dangerColor": "#ffea64",
        "mainFont": "Inter Tight",
        "display1Font": "Inter Tight",
        "display1Size": 5,
        "display2Font": "Inter Tight",
        "display2Size": 4,
        "display5Font": "Inter Tight",
        "display5Size": 2.5,
        "display7Font": "Inter Tight",
        "display7Size": 1.4,
        "display4Font": "Inter Tight",
        "display4Size": 1.2,
        "isRoundedImages": true,
        "isRoundedButtons": true,
        "isLargeButtons": true,
        "isGhostButtonBorder": true,
        "underlinedLinks": false,
        "isAnimatedOnScroll": false,
        "isScrollToTopButton": false
      }
    },
    "path": "@PROJECT_PATH@",
    "versionFirst": "5.9.4",
    "siteFonts": [
      {
        "css": "'Inter Tight', sans-serif",
        "name": "Inter Tight",
        "url": "https://fonts.googleapis.com/css?family=Inter+Tight:100,200,300,400,500,600,700,800,900,100i,200i,300i,400i,500i,600i,700i,800i,900i"
      }
    ],
    "favicon": "@PROJECT_PATH@/assets/images/girasol2_1.jpg",
    "mbrsiteDomain": "6gatfshbud",
    "imageResize": false,
    "usedWebp": false,
    "robotsSwitcher": false,
    "sitemapSwitcher": false,
    "sitemapSwitcherAuto": false,
    "siteUrl": false,
    "cookiesAlert": false,
    "gdpr": false,
    "witsec-white-label": true,
    "publishChangesOnly": true,
    "uniqCompNum": 9,
    "versionPublish": "5.9.4",
    "screenshot": "screenshot.png"
  },
  "pages": {
    "index.html": {
      "settings": {
        "main": true,
        "title": "Home",
        "meta_descr": "",
        "header_custom": "",
        "footer_custom": "",
        "html_before": ""
      },
      "components": [
        {
          "alias": false,
          "_styles": {
            "& when not (@fullScreen)": {
              "padding-top": "(@paddingTop * 1rem)",
              "padding-bottom": "(@paddingBottom * 1rem)"
            },
            "& when (@bg-type = \"color\")": {
              "background-color": "@bg-value"
            },
            "& when (@bg-type = \"image\")": {
              "background-image": "url(@bg-value)"
            },
            ".mbr-fallback-image.disabled": {
              "display": "none"
            },
            ".mbr-fallback-image": {
              "display": "block",
              "background-size": "cover",
              "background-position": "center center",
              "width": "100%",
              "height": "100%",
              "position": "absolute",
              "top": "0",
              "& when (@bg-type = 'video')": {
                "background-image": "url(@fallBackImage)"
              }
            },
            ".card-wrapper": {
              "background": "@wrapBgColor",
              "@media (max-width: 767px)": {
                "padding": "1rem"
              },
              "@media (min-width: 768px) and (max-width: 991px)": {
                "padding": "2rem"
              },
              "@media (min-width: 992px)": {
                "padding": "9rem 4rem"
              }
            },
            ".mbr-text, .mbr-section-btn": {
              "color": "#000000",
              "text-align": "center"
            },
            ".card-title, .card-box": {
              "text-align": "center",
              "color": "#2e481a"
            }
          },
          "_name": "article06",
          "_sourceTheme": "startm5",
          "_customHTML": "<section data-bs-version=\"5.1\" class=\"article6\" group=\"Article\" data-bg-video=\"{{bg.type == 'video' &amp;&amp; bg.value.url}}\" mbr-class=\"{\n    'mbr-fullscreen': fullScreen,\n    'mbr-parallax-background': bg.parallax}\">\n\t<mbr-parameters>\n\t\t<header>Size</header>\n\t\t<input type=\"checkbox\" title=\"Full Screen\" name=\"fullScreen\">\n\t\t<input type=\"checkbox\" title=\"Full Width\" name=\"fullWidth\">\n\t\t<input type=\"range\" inline=\"\" title=\"Top\" name=\"paddingTop\" min=\"0\" max=\"10\" step=\"1\" value=\"6\">\n\t\t<input type=\"range\" inline=\"\" title=\"Bottom\" name=\"paddingBottom\" min=\"0\" max=\"10\" step=\"1\" value=\"6\">\n\t\t<input type=\"range\" inline=\"\" title=\"Content Width\" name=\"contentWidth\" min=\"4\" max=\"12\" step=\"1\" value=\"12\">\n\t\t<header>Show/Hide</header>\n\t\t<input type=\"checkbox\" title=\"Title\" name=\"showTitle\" checked=\"\">\n\t\t<input type=\"checkbox\" title=\"Text\" name=\"showText\">\n\t\t<input type=\"checkbox\" title=\"Buttons\" name=\"showButtons\">\n\t\t<input type=\"color\" title=\"Wrap Bg\" name=\"wrapBgColor\" value=\"#9fe870\">\n\t\t<header>Background</header>\n\t\t<fieldset type=\"background\" name=\"bg\" parallax=\"\">\n\t\t\t<input type=\"image\" title=\"Image\" value=\"../_images/background1.jpg\" parallax=\"\">\n\t\t\t<input type=\"color\" title=\"Color\" value=\"#2e481a\" selected=\"\">\n\t\t\t<input type=\"video\" title=\"Video\" value=\"https://vimeo.com/428046504\">\n\t\t</fieldset>\n\t\t<header condition=\"bg.type === 'video'\">Fallback Image</header>\n\t\t<input type=\"image\" title=\"Fallback Image\" value=\"../_images/background1.jpg\" name=\"fallBackImage\" condition=\"bg.type === 'video'\">\n\t\t<input type=\"checkbox\" title=\"Overlay\" name=\"overlay\" condition=\"bg.type !== 'color'\" checked=\"\">\n\t\t<input type=\"color\" title=\"Overlay Color\" name=\"overlayColor\" value=\"#ffffff\" condition=\"overlay &amp;&amp; bg.type !== 'color'\">\n\t\t<input type=\"range\" inline=\"\" title=\"Opacity\" name=\"overlayOpacity\" min=\"0\" max=\"1\" step=\"0.1\" value=\"0.3\" condition=\"overlay &amp;&amp; bg.type !== 'color'\">\n\t</mbr-parameters>\n\n\t<div class=\"mbr-fallback-image disabled\" mbr-if=\"bg.type == 'video'\"></div>\n\t<div class=\"mbr-overlay\" mbr-if=\"overlay &amp;&amp; bg.type!== 'color'\" mbr-style=\"{'opacity': overlayOpacity, 'background-color': overlayColor}\"></div>\n\t<div mbr-class=\"{'container': !fullWidth, 'container-fluid': fullWidth}\">\n\t\t<div class=\"row justify-content-center\">\n\t\t\t<div class=\"card col-md-12 col-lg-{{contentWidth}}\">\n\t\t\t\t<div class=\"card-wrapper\">\n\t\t\t\t\t<div class=\"card-box align-left\">\n\t\t\t\t\t\t<h4 class=\"card-title mbr-fonts-style\" mbr-theme-style=\"display-2\" mbr-if=\"showTitle\" data-app-selector=\".card-title, .card-box\">\n\t\t\t\t\t\t\t<b>Start Creating Magic Now!</b>\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t<p class=\"mbr-text mbr-fonts-style mt-4\" mbr-theme-style=\"display-7\" mbr-if=\"showText\" data-app-selector=\".mbr-text, .mbr-section-btn\">\n\t\t\t\t\t\t\tClick any text to edit or style it. Select text to insert a link. Click blue \"Gear\" icon in\n\t\t\t\t\t\t\tthe top right corner to hide/show buttons, text, title and change the block background.\n\t\t\t\t\t\t\tClick red \"+\" in the bottom right corner to add a new block. Use the top left menu to create\n\t\t\t\t\t\t\tnew pages, sites and add themes.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div mbr-buttons=\"\" mbr-theme-style=\"display-7\" class=\"mbr-section-btn mt-4\" mbr-if=\"showButtons\" data-toolbar=\"-mbrBtnMove\">\n\t\t\t\t\t\t\t<a class=\"btn btn-white btn-lg\" href=\"https://mobiri.se\" data-app-placeholder=\"Type Text\">Start Now</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</section>\n\n\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Streaming App</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\">\n    <style>\n        /* Custom CSS to adjust layout */\n        #playlist {\n            background-color: #f8f9fa;\n            padding: 15px;\n            max-height: 100vh; /* Set a maximum height equal to the viewport height */\n            overflow-y: auto; /* Add a vertical scrollbar when needed */\n        }\n\n        #videoPlayer {\n            width: 100%;\n            height: auto;\n        }\n\n        .input-group-btn {\n            display: flex;\n            align-items: center;\n        }\n\n        .btn-go {\n            margin-left: 10px;\n        }\n\n        .tv-logo {\n            width: 100px;\n        }\n\n        /* Apply subtle glow effect on hover */\n        .channel:hover {\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n            transition: box-shadow 0.3s ease-in-out;\n        }\n\n        /* Change cursor to pointer on hover */\n        .channel:hover {\n            cursor: pointer;\n        }\n\n        /* CSS for the billed message */\n        .billed-msg {\n            position: fixed;\n            bottom: 10px;\n            right: 10px;\n            background-color: #333;\n            color: white;\n            padding: 5px 10px;\n            border-radius: 5px;\n        }\n\n        /* Search bar styles */\n        .search-bar {\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container-fluid\">\n        <div class=\"row d-flex justify-content-center\">\n            <div class=\"col-md-2 d-none\" id=\"playlist\">\n                 <input type=\"text\" id=\"searchInput\" class=\"form-control search-bar\" placeholder=\"Search Channel\">\n                <!-- Playlist items will be added here -->\n            </div>\n            <div class=\"col-md-10\">\n                <div class=\"input-group mb-3 mt-3\">\n                    <input type=\"text\" id=\"m3uURL\" class=\"form-control\" placeholder=\"Enter M3U URL\">\n                    <div class=\"input-group-btn\">\n                        <button id=\"loadM3U\" class=\"btn btn-primary btn-go\">Go</button>\n                    </div>\n                </div>\n                <video id=\"videoPlayer\" controls autoplay muted></video>\n            </div>\n        </div>\n    </div>\n    <div id=\"billedMsg\" class=\"billed-msg d-none\"></div>\n\n    [JS_CODE_0]\n    [JS_CODE_1]\n    [JS_CODE_2]\n    [JS_CODE_3]\n</body>\n</html>",
          "_cid": "ulyfgHpEjs",
          "_anchor": "article06-8",
          "_PHPplaceholders": [],
          "_JSplaceholders": [
            "<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"\n        integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\" crossorigin=\"anonymous\"></script>",
            "<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"\n        integrity=\"sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL\" crossorigin=\"anonymous\">\n    </script>",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/shaka-player/4.3.0/shaka-player.compiled.js\"></script>",
            "<script>\n        // Define an array to store all playlist items\n        let playlistItems = [];\n        let player = null;\n\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            const videoPlayer = document.getElementById(\"videoPlayer\");\n            const playlist = document.getElementById(\"playlist\");\n            const loadM3UButton = document.getElementById(\"loadM3U\");\n            const m3uURLInput = document.getElementById(\"m3uURL\");\n            const billedMsgElement = document.getElementById(\"billedMsg\");\n            const searchInput = document.getElementById(\"searchInput\");\n\n            //  Get playlist url from url if any\n            var urlParams = new URLSearchParams(window.location.search);\n            var playlistParam = urlParams.get('playlist');\n            if (playlistParam != null) {\n                localStorage.setItem(\"m3uPlaylistURL\", playlistParam);\n            }\n\n            // Load search input from local storage\n            const savedPlaylistURL = localStorage.getItem(\"m3uPlaylistURL\");\n            if (savedPlaylistURL) {\n                m3uURLInput.value = savedPlaylistURL;\n                // Automatically load the saved playlist\n                setTimeout(function () {\n                    loadM3UButton.click();\n                }, 500);\n            }\n\n            loadM3UButton.addEventListener(\"click\", () => {\n                const m3uURL = m3uURLInput.value;\n                // Save search input to local storage\n                localStorage.setItem(\"m3uPlaylistURL\", m3uURL);\n\n                // Load and parse the M3U file from the user-provided URL\n                fetch(m3uURL)\n                    .then(response => response.text())\n                    .then(data => {\n                        videoPlayer.innerHTML = ''; // Clear the video player\n                        clearPlaylist(); // clear channel list\n\n                        data = trimLineBreak(data);\n                        const blocks = data.split('\\n\\n');\n                        let tvgName = '';\n                        let tvgLogo = '';\n                        let billedMsg = '';\n\n                        for (let i = 0; i < blocks.length; i++) {\n                            var items = [];\n                            var lines = blocks[i].split('\\n');\n\n                            items[i] = { 'key': '', 'tvgName': '', 'tvgLogo': '', 'source': '' };\n                            for (let j = 0; j < lines.length; j++) {\n                                const line = lines[j].trim();\n                                \n                                // Check for the #EXTM3U line with billed-msg\n                                if (line.startsWith(\"#EXTM3U\")) {\n                                    const billedMsgMatch = line.match(/billed-msg=\"([^\"]+)\"/);\n                                    if (billedMsgMatch) {\n                                        billedMsg = billedMsgMatch[1];\n                                    }\n                                }\n\n                                // Check for license key\n                                if (line.startsWith(\"#KODIPROP:inputstream.adaptive.license_key=\")) {\n                                    var keyInfo = extractKey(line);\n\n                                    if(keyInfo != null) {\n                                        items[i]['key'] = keyInfo;\n                                    }\n                                }\n\n                                // Check if it's an EXTINF line with tvg-name and tvg-logo\n                                if (line.startsWith(\"#EXTINF:\")) {\n                                    const tvgNameMatch = line.match(/tvg-name=\"([^\"]+)\"/);\n                                    if (tvgNameMatch) {\n                                        tvgName = tvgNameMatch[1];\n                                    } else {\n                                        // Extract the last string after the last comma as tvg-name\n                                        var lastCommaIndex = line.lastIndexOf(\",\");\n                                        if (lastCommaIndex !== -1) {\n                                            tvgName = line.substring(lastCommaIndex + 1).trim();\n                                        } else {\n                                            tvgName = `Stream ${j + 1}`;\n                                        }   \n                                    }\n\n                                    const tvgLogoMatch = line.match(/tvg-logo=\"([^\"]+)\"/);\n                                    if (tvgLogoMatch) {\n                                        tvgLogo = tvgLogoMatch[1];\n                                    }\n\n                                    items[i]['tvgName'] = tvgName;\n                                    items[i]['tvgLogo'] = convertToHttps(tvgLogo);\n                                }\n\n                                // Check if the line is not empty and not a comment\n                                if (line.length > 0 && !line.startsWith(\"#\")) {\n                                    items[i]['source'] = convertToHttps(line);\n                                }\n                            }\n\n                            if(items.length > 0) {\n                                items = reorderIndexes(items);\n                                if(items[0].source != null && items[0].source != '') {\n                                    playlistItems.push(items);\n                                }\n                            }\n                        }\n\n                        // Render the playlist\n                        renderPlaylist(playlistItems);\n\n                        if(document.getElementsByClassName('channel').length > 0) {\n                            playlist.classList.remove(\"d-none\");\n                        } else {\n                            playlist.classList.add(\"d-none\");\n                        }\n\n                        if(billedMsg != '') {\n                            billedMsgElement.textContent = billedMsg;\n                            billedMsgElement.classList.remove(\"d-none\");\n                        } else {\n                            billedMsgElement.classList.add(\"d-none\");\n                        }\n                    })\n                    .catch(error => {\n                        console.error(\"Error loading the M3U file:\", error);\n                    });\n            });\n\n            // Search input event listener\n            searchInput.addEventListener(\"input\", () => {\n                const searchText = searchInput.value.trim().toLowerCase();\n\n                // Filter playlist items based on search input\n                const filteredItems = playlistItems.filter(item => {\n                return item[0].tvgName.toLowerCase().includes(searchText);\n                });\n\n                // Render the filtered playlist\n                clearPlaylist(false);\n                renderPlaylist(filteredItems);\n            });\n\n            // Function to render the playlist\n            function renderPlaylist(items) {\n                items.forEach((item, index) => {\n                    const playlistItem = document.createElement(\"div\");\n                    playlistItem.className = \"channel d-flex flex-column p-3\";\n                    playlistItem.textContent = item[0].tvgName;\n\n                    if (item[0].tvgLogo) {\n                        const logoImage = document.createElement(\"img\");\n                        logoImage.src = item[0].tvgLogo;\n                        logoImage.className = \"tv-logo\";\n                        playlistItem.appendChild(logoImage);\n                    }\n\n                    playlistItem.addEventListener(\"click\", async () => {\n                        // If a player instance exists, destroy it before creating a new one\n                        if (player !== null) {\n                            await player.destroy();\n                        }\n\n                        // Init Shaka Player\n                        player = new shaka.Player(videoPlayer);\n\n                        if (item[0].key.key_id !== '' && item[0].key.key !== '') {\n                            player.configure({\n                                drm: {\n                                    clearKeys: {\n                                        [item[0].key.key_id]: item[0].key.key\n                                    }\n                                }\n                            });\n                        }\n\n                        await player.load(item[0].source);\n\n                        // Scroll to the video player\n                        videoPlayer.scrollIntoView({ behavior: 'smooth' });\n                    });\n\n                    playlist.appendChild(playlistItem);\n                });\n            }\n        });\n\n        function clearPlaylist(clearItems = true) {\n            // Clear the existing playlist items\n            if(clearItems) {\n                playlistItems = [];\n            }\n            \n            const playlistItemsElem = playlist.querySelectorAll('.channel');\n            playlistItemsElem.forEach(item => item.remove());\n        }\n\n        function trimLineBreak(text) {\n            // Replace multiple line breaks with a single line break\n            return text.replace(/[\\r\\n]{2,}/g, '\\n\\n');\n        }\n\n        function reorderIndexes(items) {\n            let rearrangedItems = [];\n\n            items.forEach(item => {\n                if (item !== undefined) {\n                    rearrangedItems.push(item);\n                }\n            });\n\n            return rearrangedItems;\n        }\n\n        function base64ToHex(base64) {\n            if (base64.length > 0) {\n                const binary = atob(base64);\n                let hex = '';\n                for (let i = 0; i < binary.length; i++) {\n                    let char = binary.charCodeAt(i).toString(16);\n                    hex += (char.length === 1 ? '0' : '') + char;\n                }\n                return hex;\n            }\n            return base64;\n        }\n\n        function convertToHttps(url) {\n            return url.replace(/^http:/, 'https:');\n        }\n\n        function extractKey(line) {\n            const prefix = '#KODIPROP:inputstream.adaptive.license_key=';\n            const extractedValue = line.substring(line.indexOf(prefix) + prefix.length);\n\n            try {\n                var json = JSON.parse(extractedValue);\n                if (json && json.keys.length > 0) {\n                    const KEY = base64ToHex(json.keys[0].k); // Value of 'k' (KEY)\n                    const ID = base64ToHex(json.keys[0].kid); // Value of 'kid' (ID)\n\n                    return {'key_id': ID, 'key': KEY};\n                } else {\n                    return null;\n                }\n            } catch (error) {\n                return null;\n            }\n        }\n\n    </script>"
          ],
          "_protectedParams": [],
          "_global": false,
          "_once": false,
          "_params": {}
        }
      ]
    }
  }
}